swagger: '2.0'
info:
  description: BitWaves 后端接口文档
  version: 1.0.0
  title: BitWaves Web API Docs
  contact:
    email: msrlancern@126.com

tags:
  - name: contents
    description: 用于访问静态对象库的 API
  - name: users
    description: 用于访问用户数据的 API
  - name: auth
    description: 用于用户身份验证的 API
  - name: announcements
    description: 用于全站公告的 API
  - name: problems
    description: 用于访问题目集的 API
  - name: archive
    description: 用于访问公开题目集的 API
  - name: problemTags
    description: 用于访问题目标签数据字典的 API
  - name: languages
    description: 评测语言相关 API

paths:
  /contents:
    get:
      summary: 获取静态对象列表
      description: 获取静态对象列表
      tags:
        - contents
      parameters:
        - in: header
          name: Authorization
          required: true
          type: string
          description: 身份验证标识，格式为 `Jwt <jwt>`。注意 `Jwt` 与 `<jwt>` 之间的空格
        - in: query
          name: name
          required: false
          type: string
          description: 要筛选的静态对象的名称
        - in: query
          name: mimeType
          required: false
          type: string
          description: 要筛选的静态对象的 MIME 类型
        - in: query
          name: page
          required: false
          type: integer
          description: 分页参数，页面编号。页面编号从 0 开始，默认为 0
        - in: query
          name: itemsPerPage
          required: false
          type: integer
          description: 分页参数，每个页面中的元素数量
      responses:
        200:
          description: 操作成功完成
          headers:
            X-BitWaves-Count:
              type: integer
              description: 分页前满足筛选条件的静态对象数量
          schema:
            type: array
            items:
              $ref: '#/definitions/ContentObjectInfo'
        400:
          description: 无效的查询参数
        403:
          description: 用户没有相应的权限
    post:
      summary: 上传一个静态对象
      description: 上传一个静态对象。静态对象的大小不应该超过 14 MB
      tags:
        - contents
      parameters:
        - in: header
          name: Authorization
          required: true
          type: string
          description: 身份验证标识，格式为 `Jwt <jwt>`。注意 `Jwt` 与 `<jwt>` 之间的空格
        - in: formData
          required: true
          name: content
          type: file
          description: 包含静态对象数据的文件。文件大小不应该超过 14 MB
      responses:
        200:
          description: 操作成功完成
          schema:
            type: object
            required:
              - id
            properties:
              id:
                type: string
                description: 新创建的静态对象的全局唯一 ID
                example: a154edb2431fdbb230fbf384
        400:
          description: 无效的输入数据
        403:
          description: 用户没有相应的权限

  /contents/{contentId}:
    get:
      summary: 获取静态对象数据
      description: 获取静态对象数据
      tags:
        - contents
      parameters:
        - in: path
          name: contentId
          type: string
          required: true
          description: 静态对象的全局唯一 ID
        - in: query
          name: attachment
          type: boolean
          required: false
          description: 若该参数被设置为 `true`，则返回的响应中包含 `Content-Disposition` 头部字段且被设置为 `attachment`。通常情况下这样的响应会直接拉起浏览器的"下载"对话框询问用户保存地址。默认为 `false`
      responses:
        200:
          description: 操作成功完成
        400:
          description: 无效的请求参数
        404:
          description: 无法找到指定的静态对象
    delete:
      summary: 删除静态对象
      description: 删除静态对象
      tags:
        - contents
      parameters:
        - in: path
          name: contentId
          required: true
          type: string
          description: 要删除的静态对象的全局唯一 ID
        - in: header
          name: Authorization
          required: true
          type: string
          description: 身份验证标识，格式为 `Jwt <jwt>`。注意 `Jwt` 与 `<jwt>` 之间的空格
      responses:
        200:
          description: 操作成功完成
        400:
          description: 无效的静态对象 ID
        403:
          description: 用户没有相应的权限
        404:
          description: 未能找到指定的静态对象

  /users:
    get:
      summary: 获取用户列表
      description: 获取用户列表
      tags:
        - users
      produces:
        - application/json
      parameters:
        - in: query
          name: page
          type: integer
          required: false
          description: 分页参数，页面编号
          minimum: 0
          default: 0
        - in: query
          name: itemsPerPage
          type: integer
          required: false
          description: 分页参数，每一页中显示的用户数量
          minimum: 1
          default: 20
        - in: query
          name: by
          type: string
          required: false
          description: 排序依据
          enum:
            - TotalSubmissions
            - TotalAccepted
            - TotalProblemsAttempted
            - TotalProblemsAccepted
          default: TotalProblemsAccepted
        - in: query
          name: descend
          type: boolean
          required: false
          description: 排序时是否应该按照给定的排序依据降序排序
          default: true
      responses:
        200:
          description: 操作成功完成
          headers:
            X-BitWaves-Count:
              type: integer
              description: 在未分页之前满足筛选条件的用户数量
          schema:
            type: array
            items:
              $ref: '#/definitions/UserListItem'
        400:
          description: 无效的查询参数
    post:
      summary: 创建一个新用户
      description: 创建一个新用户
      tags:
        - users
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - in: body
          name: data
          required: true
          schema:
            $ref: '#/definitions/PostUserModel'
      responses:
        200:
          description: 操作成功完成
        400:
          description: 数据模型验证失败，响应的body中包含模型验证错误信息
        409:
          description: 给定的用户名已经存在

  /users/{username}:
    get:
      summary: 获取用户信息
      description: 获取用户信息
      tags:
        - users
      produces:
        - application/json
      parameters:
        - in: path
          name: username
          type: string
          required: true
          description: 用户名
        - in: query
          name: detailed
          type: boolean
          required: false
          description: 是否包含更加详细的信息，默认为 `false`
        - in: header
          name: Authorization
          type: string
          required: false
          description: 当 `detailed` 为 `true` 时，提供身份验证信息。内容格式应该为 `Jwt <jwt>`，注意 `Jwt` 与 `<jwt>` 之间的空格
      responses:
        200:
          description: 操作成功完成
          schema:
            $ref: '#/definitions/UserInfo'
        403:
          description: 参数 `detailed` 为 `true` 但提供的 JWT 无效
        404:
          description: 用户名未找到
    put:
      summary: 修改用户信息
      description: 修改用户信息
      tags:
        - users
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - in: path
          name: username
          type: string
          required: true
          description: 用户名
        - in: header
          name: Authorization
          type: string
          required: true
          description: 提供身份验证信息。内容格式应该为 `Jwt <jwt>`，注意 `Jwt` 与 `<jwt>` 之间的空格
        - in: body
          name: data
          required: true
          description: 描述用户信息修改数据
          schema:
            $ref: '#/definitions/PutUserModel'
      responses:
        200:
          description: 操作成功完成
        400:
          description: 数据模型验证失败
        403:
          description: 用户不具备相应的权限

  /users/{username}/password:
    put:
      summary: 修改用户密码
      description: 修改用户密码
      tags:
        - users
      parameters:
        - in: path
          name: username
          type: string
          required: true
          description: 用户名
        - in: header
          name: Authorization
          required: true
          type: string
          description: 提供身份验证信息。内容格式应该为 `Jwt <jwt>`，注意 `Jwt` 与 `<jwt>` 之间的空格
        - in: body
          name: data
          required: true
          description: 修改密码数据
          schema:
            $ref: '#/definitions/PutUserPasswordModel'
      responses:
        200:
          description: 操作成功完成
        400:
          description: 请求数据无效
        403:
          description: 用户没有相应的权限
        404:
          description: 给定的用户未找到

  /auth:
    post:
      summary: 创建用户身份验证标识
      tags:
        - auth
      description: 创建用户身份验证标识
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - in: body
          name: data
          required: true
          schema:
            $ref: '#/definitions/PostAuthModel'
      responses:
        200:
          description: 操作成功完成
          schema:
            type: object
            required:
              - username
              - isAdmin
              - jwt
            properties:
              username:
                type: string
                description: 用户名
                example: Lancern
              isAdmin:
                type: boolean
                description: 用户是否为管理员
                example: true
              jwt:
                type: string
                description: 编码用户身份验证信息的 JWT
        400:
          description: 数据模型验证失败
        404:
          description: 指定的用户不存在
        422:
          description: 密码不正确

  /announcements:
    get:
      summary: 获取全站公告列表
      description: 获取全站公告列表
      tags:
        - announcements
      parameters:
        - in: query
          name: page
          type: integer
          description: 分页参数，页面编号。页面编号从 0 开始，默认为 0
        - in: query
          name: itemsPerPage
          type: integer
          description: 分页参数，每页上的元素数量，默认为 20
      responses:
        200:
          description: 操作成功完成
          headers:
            X-BitWaves-Count:
              type: integer
              description: 分页前满足筛选条件的公告数量
          schema:
            type: array
            items:
              $ref: '#/definitions/AnnouncementListItem'
        400:
          description: 无效的查询参数
    post:
      description: 创建新的全站公告
      summary: 创建新的全站公告
      tags:
        - announcements
      parameters:
        - in: header
          name: Authorization
          type: string
          required: true
          description: 身份验证标识，格式为 `Jwt <jwt>`。注意 `Jwt` 与 `<jwt>` 之间的空格
        - in: body
          name: data
          required: true
          description: 要创建的公告信息
          schema:
            $ref: '#/definitions/PostAnnouncementModel'
      responses:
        200:
          description: 操作成功完成
          schema:
            type: object
            required:
              - id
            properties:
              id:
                type: string
                description: 新创建的全站公告的全局唯一 ID
                example: a154edb2431fdbb230fbf384
        400:
          description: 无效的请求参数
        403:
          description: 用户没有相应的权限

  /announcements/{announcementId}:
    get:
      summary: 获取全站公告信息
      description: 获取全站公告信息
      tags:
        - announcements
      parameters:
        - in: path
          name: announcementId
          type: string
          required: true
          description: 公告的 ID
      responses:
        200:
          description: 操作成功完成
          schema:
            $ref: '#/definitions/AnnouncementInfo'
        400:
          description: 无效的公告 ID
        404:
          description: 无法找到给定的公告
    put:
      summary: 修改一个全站公告
      description: 修改一个全站公告
      tags:
        - announcements
      parameters:
        - in: path
          name: announcementId
          type: string
          required: true
          description: 要修改的全站公告 ID
        - in: header
          name: Authorization
          type: string
          required: true
          description: 身份验证标识，格式为 `Jwt <jwt>`。注意 `Jwt` 与 `<jwt>` 之间的空格
        - in: body
          name: data
          required: true
          schema:
            $ref: '#/definitions/PutAnnouncementModel'
      responses:
        200:
          description: 操作成功完成
        400:
          description: 无效的请求参数
        403:
          description: 用户没有相应的权限
        404:
          description: 未能找到指定的全站公告
    delete:
      summary: 删除一个全站公告
      description: 删除一个全站公告
      tags:
        - announcements
      parameters:
        - in: path
          name: announcementId
          type: string
          required: true
          description: 要修改的全站公告 ID
        - in: header
          name: Authorization
          type: string
          required: true
          description: 身份验证标识，格式为 `Jwt <jwt>`。注意 `Jwt` 与 `<jwt>` 之间的空格
      responses:
        200:
          description: 操作成功完成
        400:
          description: 无效的请求参数
        403:
          description: 用户没有相应的权限
        404:
          description: 无法找到指定的全站公告

  /problems:
    get:
      summary: 获取题目列表
      description: 获取题目列表
      tags:
        - problems
      parameters:
        - in: header
          name: Authorization
          type: string
          required: true
          description: 用户身份验证标识，格式为 `Jwt <jwt>`。注意 `Jwt` 与 `<jwt>` 之间的空格
        - in: query
          name: page
          type: integer
          required: false
          description: 分页参数，页面编号。页面编号从 0 开始
        - in: query
          name: itemsPerPage
          type: integer
          required: false
          description: 分页参数，每一页上的元素数量。默认为 20
      responses:
        200:
          description: 操作成功完成
          headers:
            X-BitWaves-Count:
              type: integer
              description: 分页前满足筛选条件的题目数量
          schema:
            type: array
            items:
              $ref: '#/definitions/ProblemListItem'
        400:
          description: 请求中携带的参数无效
        403:
          description: 用户没有相应的权限
    post:
      summary: 创建一个题目
      description: 创建一个题目
      tags:
        - problems
      parameters:
        - in: header
          name: Authorization
          type: string
          required: true
          description: 身份验证标识，格式为 `Jwt <jwt>`。注意 `Jwt` 与 `<jwt>` 之间的空格
        - in: body
          name: data
          required: true
          description: 题目创建数据
          schema:
            $ref: '#/definitions/PostProblemModel'
      responses:
        200:
          description: 操作成功完成
          schema:
            type: object
            required:
              - id
            properties:
              id:
                type: string
                description: 新创建的题目的全局唯一 ID
                example: "a154edb2431fdbb230fbf384"
        400:
          description: 给定的题目创建数据无效
        403:
          description: 用户没有权限创建题目

  /problems/{problemId}:
    put:
      summary: 修改题目信息
      description: 修改题目信息
      tags:
        - problems
      parameters:
        - in: path
          name: problemId
          type: string
          required: true
          description: 题目的全局唯一 ID
        - in: header
          name: Authorization
          type: string
          required: true
          description: 身份验证头部字段，内容格式为 `Jwt <jwt>`，注意 `Jwt` 与 `<jwt>` 之间的空格
        - in: body
          name: data
          required: true
          description: 题目修改信息
          schema:
            $ref: '#/definitions/PutProblemModel'
      responses:
        200:
          description: 操作成功完成
        400:
          description: 给定的题目修改信息无效
        403:
          description: 用户没有权限修改题目信息
        404:
          description: 题目不存在
    get:
      summary: 获取题目信息
      description: 获取题目信息
      tags:
        - problems
      parameters:
        - in: path
          name: problemId
          required: true
          type: string
          description: 题目的全局唯一 ID
        - in: header
          name: Authorization
          required: false
          type: string
          description: 当访问的题目不是公开题目时，提供用户身份验证标识 JWT。该字段的内容格式为 `Jwt <jwt>`，注意 `Jwt` 与 `<jwt>` 之间的空格
      responses:
        200:
          description: 操作成功完成
          schema:
            $ref: '#/definitions/ProblemInfo'
        400:
          description: 无效的题目 ID
        403:
          description: 用户没有足够的权限访问题目
        404:
          description: 未能找到指定的题目
  /problems/{problemId}/tags:
    post:
      summary: 向题目添加标签
      description: 向题目添加标签
      tags:
        - problems
      parameters:
        - in: header
          name: Authorization
          type: string
          required: true
          description: 用户身份标识，格式为 `Jwt <jwt>`。注意 `Jwt` 与 `<jwt>` 之间的空格
        - in: body
          name: data
          required: true
          description: 要添加的标签名称
          schema:
            type: array
            items:
              type: string
      responses:
        200:
          description: 操作成功完成
        400:
          description: 请求中包含无效的标签名称
        403:
          description: 用户没有相应的权限
        404:
          description: 无法找到要求的题目
        422:
          description: 一个或多个要添加的标签无法在题目标签数据字典中被找到
    delete:
      summary: 从题目删除标签
      description: 从题目删除标签
      tags:
        - problems
      parameters:
        - in: header
          name: Authorization
          type: string
          required: true
          description: 用户身份标识，格式为 `Jwt <jwt>`。注意 `Jwt` 与 `<jwt>` 之间的空格
        - in: body
          name: data
          required: true
          description: 要删除的标签名称
          schema:
            type: array
            items:
              type: string
      responses:
        200:
          description: 操作成功完成
        400:
          description: 请求中包含无效的标签名称
        403:
          description: 用户没有相应的权限
        404:
          description: 无法找到要求的题目

  /problems/tags:
    get:
      summary: 获取所有的题目标签
      description: 获取所有的题目标签
      tags:
        - problemTags
      parameters:
        - in: header
          name: Authorization
          required: true
          type: string
          description: 用户身份标识，格式为 `Jwt <jwt>`。注意 `Jwt` 与 `<jwt>` 之间的空格
      responses:
        200:
          description: 操作成功完成
          schema:
            type: array
            items:
              type: string
            example:
              - 暴力
              - 贪心
              - 数据结构
        403:
          description: 用户没有相应的权限
    post:
      summary: 创建新的题目标签
      description: 创建新的题目标签
      tags:
        - problemTags
      parameters:
        - in: header
          name: Authorization
          type: string
          required: true
          description: 用户身份标识，格式为 `Jwt <jwt>`。注意 `Jwt` 与 `<jwt>` 之间的空格
        - in: body
          name: data
          required: true
          schema:
            type: array
            items:
              type: string
              minLength: 1
              maxLength: 32
          description: 要添加的标签名称
      responses:
        200:
          description: 操作成功完成
        400:
          description: 一个或多个标签名称不合法
        403:
          description: 用户没有相应的权限
        409:
          description: 一个或多个标签已经存在
    delete:
      summary: 删除已有的题目标签
      description: 删除已有的题目标签
      tags:
        - problemTags
      parameters:
        - in: header
          name: Authorization
          type: string
          required: true
          description: 用户身份标识，格式为 `Jwt <jwt>`。注意 `Jwt` 与 `<jwt>` 之间的空格
        - in: body
          name: data
          required: true
          schema:
            type: array
            items:
              type: string
            example:
              - 暴力
              - 模拟
              - 数据结构
          description: 要删除的题目标签名称
      responses:
        200:
          description: 操作成功完成
        400:
          description: 一个或多个标签不合法
        403:
          description: 用户没有相应的权限

  /archive:
    get:
      summary: 获取 Problem Archive 列表
      description: 获取 Problem Archive 列表
      tags:
        - archive
      produces:
        - application/json
      parameters:
        - in: query
          name: by
          type: string
          required: false
          description: 列表排序方法
          enum:
            - Id
            - Difficulty
            - LastUpdateTime
            - TotalSubmissions
            - AcceptedSubmissions
            - TotalAttemptedUsers
            - TotalSolvedUsers
          default: Id
        - in: query
          name: descend
          type: boolean
          required: false
          description: 是否按照给定关键字的降序排列
          default: false
        - in: query
          name: page
          type: integer
          required: false
          description: 分页参数，要返回的列表的页面编号
          minimum: 0
          default: 0
        - in: query
          name: itemsPerPage
          type: integer
          required: false
          description: 分页参数，每一页上的项目数量
          minimum: 1
          default: 20
      responses:
        200:
          description: 操作成功完成
          headers:
            X-BitWaves-Count:
              type: integer
              description: 分页前满足筛选条件的题目数量
          schema:
            type: array
            items:
              $ref: '#/definitions/ProblemListItem'
        400:
          description: 请求中携带的参数无效
    post:
      summary: 向公开题目集中添加题目
      description: 向公开题目集中添加题目
      tags:
        - archive
      parameters:
        - in: header
          name: Authorization
          type: string
          required: true
          description: 用户身份验证标识，内容格式为 `Jwt <jwt>`。注意 `Jwt` 与 `<jwt>` 之间的空格
        - in: body
          name: data
          required: true
          description: 要添加的题目数据
          schema:
            $ref: '#/definitions/PostArchiveModel'
      responses:
        200:
          description: 操作成功完成
        400:
          description: 请求中的数据不合法
        403:
          description: 用户没有权限执行此操作
        404:
          description: 无法找到给定的题目
        409:
          description: 公开题目集 ID 冲突
    delete:
      summary: 从公开题目集中删除题目
      description: 从公开题目集中删除题目
      tags:
        - archive
      parameters:
        - in: header
          name: Authorization
          type: string
          required: true
          description: 用户身份验证标识，内容格式为 `Jwt <jwt>`。注意 `Jwt` 与 `<jwt>` 之间的空格
        - in: body
          name: data
          required: true
          description: 要删除的题目在公开题目集中的 ID
          schema:
            type: array
            items:
              type: integer
            example:
              - 1
              - 3
              - 200
      responses:
        200:
          description: 操作成功完成
        400:
          description: 请求中的数据无效
        403:
          description: 用户没有权限执行此操作
  /archive/{archiveId}:
    get:
      summary: 获取公开题目集中给定 ID 题目的详细信息
      description: 获取公开题目集中给定 ID 题目的详细信息
      tags:
        - archive
      parameters:
        - in: path
          name: archiveId
          required: true
          type: integer
          description: 题目在公开题目集中的 ID
      responses:
        200:
          description: 操作成功完成
          schema:
            $ref: '#/definitions/ProblemInfo'
        400:
          description: 无效的题目 ID
        404:
          description: 无法找到指定的题目

  /languages:
    get:
      summary: 获取所有可用的评测语言列表
      description: 获取所有可用的评测语言列表
      tags:
        - languages
      responses:
        200:
          description: 操作成功完成
          schema:
            type: array
            items:
              $ref: '#/definitions/LanguageInfo'
    post:
      summary: 创建一个新评测语言
      description: 创建一个新评测语言
      tags:
        - languages
      parameters:
        - in: header
          name: Authorization
          type: string
          required: true
          description: 用户身份验证标识，格式为 `Jwt <jwt>`。注意 `Jwt` 与 `<jwt>` 之间的空格
        - in: body
          name: data
          required: true
          description: 要创建的语言数据
          schema:
            $ref: '#/definitions/PostLanguageModel'
      responses:
        200:
          description: 操作成功完成
          schema:
            type: object
            required:
              - id
            properties:
              id:
                type: string
                description: 新创建的语言的全局唯一 ID
                example: "a154edb2431fdbb230fbf384"
        400:
          description: 无效的请求数据
        403:
          description: 用户不具备需要的权限
  /languages/{languageId}:
    delete:
      summary: 删除评测语言
      description: 删除评测语言
      tags:
        - languages
      parameters:
        - in: header
          name: Authorization
          type: string
          required: true
          description: 用户身份验证标识，格式为 `Jwt <jwt>`。注意 `Jwt` 与 `<jwt>` 之间的空格
        - in: path
          name: languageId
          type: string
          required: true
          description: 要删除的评测语言的全局唯一 ID
      responses:
        200:
          description: 操作成功完成
        400:
          description: 无效的评测语言 ID
        403:
          description: 用户没有相应的权限
        404:
          description: 未能找到指定的评测语言

definitions:
  ContentObjectInfo:
    type: object
    required:
      - id
      - name
      - mimeType
      - creationTime
      - size
    properties:
      id:
        type: string
        description: 静态对象的全局唯一 ID
        example: a154edb2431fdbb230fbf384
      name:
        type: string
        description: 静态对象的名称
        example: bit-logo.jpg
      mimeType:
        type: string
        description: 静态对象的 MIME 类型
        example: image/jpg
      creationTime:
        type: string
        description: 静态对象被创建时的时间，UTC 时区
        example: 2019-10-04T14:23:56.241Z
      size:
        type: integer
        description: 静态对象的字节大小
        example: 572243

  PostUserModel:
    type: object
    required:
      - username
      - password
      - phone
    properties:
      username:
        description: 用户名
        minLength: 3
        maxLength: 64
        type: string
        example: Lancern
      password:
        description: 密码
        minLength: 6
        type: string
        example: hello_world
      phone:
        description: 手机号，由 11 个十进制数字组成
        type: string
        example: "13901234567"
  PutUserModel:
    type: object
    properties:
      nickname:
        type: string
        minLength: 1
        maxLength: 64
        description: 昵称。若不需要更改昵称，请不要提供该成员。
        example: "msr"
      phone:
        type: string
        description: 手机号码，包含 11 位数字。若不需要更改手机号，请不要提供该成员。
        example: "13701234567"
      email:
        type: string
        description: 电子邮箱。若不需要更改电子邮箱，请不要提供该成员。
        example: "msr@bit.edu.cn"
      school:
        type: string
        minLength: 1
        maxLength: 64
        description: 学校名称。若不需要更改学校名称，请不要提供该成员。
        example: "Beijing Institute of Technology"
      studentId:
        type: string
        minLength: 3
        maxLength: 30
        description: 学号，由 10 位数字组成。若不需要更改学号，请不要提供该成员。
        example: "1120160001"
      blogUrl:
        type: string
        description: 用户博客 URL。若不需要更改此项，请不要提供该成员。
        example: "https://lancern.github.io"

  PutUserPasswordModel:
    type: object
    required:
      - password
    properties:
      oldPassword:
        type: string
        description: 当用户不是管理员时，该字段表示旧密码；否则该字段将被忽略
        minLength: 6
        example: "bitwaves2019"
      password:
        type: string
        description: 新密码
        minLength: 6
        example: "bitwaves2020"

  UserListItem:
    type: object
    required:
      - username
      - nickname
      - joinTime
      - totalSubmissions
      - totalAccepted
      - totalProblemsAttempted
      - totalProblemsAccepted
    properties:
      username:
        type: string
        description: 用户名
        example: Lancern
      nickname:
        type: string
        description: 用户昵称
        example: MSR
      joinTime:
        type: string
        description: 用户加入 BITOJ 的时间，时区为 UTC 时区
        example: "2019-9-24T10:00:00"
      totalSubmissions:
        type: integer
        description: 用户总提交数量
        example: 10
      totalAccepted:
        type: integer
        description: 用户总 AC 提交数量
        example: 3
      totalProblemsAttempted:
        type: integer
        description: 用户总共尝试的题目数量
        example: 2
      totalProblemsAccepted:
        type: integer
        description: 用户总 AC 题目数量
        example: 1
  UserInfo:
    type: object
    required:
      - username
      - nickname
      - phone
      - email
      - school
      - studentId
      - blogUrl
      - joinTime
      - totalSubmissions
      - totalAccepted
      - totalProblemsAttempted
      - totalProblemsAccepted
      - isAdmin
    properties:
      username:
        type: string
        description: 用户名
        example: Lancern
      nickname:
        type: string
        description: 用户昵称
        example: msr
      phone:
        type: string
        description: 当 `detailed` 为 `true` 时，本字段包含用户的手机号
        example: "13901234567"
      email:
        type: string
        description: 用户邮箱
        example: msr@bit.edu.cn
      school:
        type: string
        description: 用户的学校
        example: Beijing Institute of Technology
      studentId:
        type: string
        description: 当 `detailed` 为 `true` 时，本字段包含用户的学号
        example: "1120160123"
      blogUrl:
        type: string
        description: 用户的博客 URL
        example: https://lancern.github.io
      joinTime:
        type: string
        description: 用户加入 BITOJ 的时间，时区为 UTC 时区
        example: "2019-9-24T10:00:00"
      totalSubmissions:
        type: integer
        description: 用户总提交数量
        example: 10
      totalAccepted:
        type: integer
        description: 用户总 AC 提交数量
        example: 3
      totalProblemsAttempted:
        type: integer
        description: 用户总共尝试的题目数量
        example: 2
      totalProblemsAccepted:
        type: integer
        description: 用户总 AC 题目数量
        example: 1
      isAdmin:
        type: boolean
        description: 用户是否为管理员
        example: true

  PostAuthModel:
    type: object
    required:
      - username
      - password
    properties:
      username:
        type: string
        description: 用户名
        example: Lancern
      password:
        type: string
        description: 密码
        example: "hello_world"

  PostAnnouncementModel:
    type: object
    required:
      - title
      - content
    properties:
      title:
        type: string
        minLength: 1
        maxLength: 128
        description: 全站公告的标题
        example: BITOJ 即日起开始营业
      pinned:
        type: boolean
        description: 公告是否置顶，默认为 false
        example: false
      content:
        type: string
        minLength: 1
        description: 全站公告的内容
        example: BITOJ 即日起开始营业，欢迎 AK！
  PutAnnouncementModel:
    type: object
    properties:
      title:
        type: string
        minLength: 1
        maxLength: 128
        description: 修改后的标题。若不需要修改标题，请不要提供此成员
      pinned:
        type: boolean
        description: 修改后的置顶标记。若不需要修改此属性，请不要提供此成员
      content:
        type: string
        minLength: 1
        description: 修改后的内容。若不需要修改此属性，请不要提供此成员

  AnnouncementListItem:
    type: object
    required:
      - id
      - title
      - author
      - creationTime
      - lastUpdateTime
      - pinned
    properties:
      id:
        type: string
        description: 全站公告的 ID
        example: 5d8825e87d2847a7e4886fbf
      title:
        type: string
        description: 全站公告的标题
        example: BITOJ 即日起开始营业
      author:
        type: string
        description: 全站公告的作者的用户名
        example: admin
      creationTime:
        type: string
        description: 全站公告的创建时间
        example: "2019-11-01T13:25:37.371Z"
      lastUpdateTime:
        type: string
        description: 全站公告的上次修改时间
        example: "2019-11-01T13:25:37.371Z"
      pinned:
        type: boolean
        description: 公告是否置顶
        example: false
  AnnouncementInfo:
    type: object
    required:
      - id
      - title
      - author
      - creationTime
      - lastUpdateTime
      - pinned
      - content
    properties:
      id:
        type: string
        description: 全站公告的 ID
        example: 5d8825e87d2847a7e4886fbf
      title:
        type: string
        description: 全站公告的标题
        example: BITOJ 即日起开始营业
      author:
        type: string
        description: 全站公告的作者的用户名
        example: admin
      creationTime:
        type: string
        description: 全站公告的创建时间
        example: "2019-11-01T13:25:37.371Z"
      lastUpdateTime:
        type: string
        description: 全站公告的上次修改时间
        example: "2019-11-01T13:25:37.371Z"
      pinned:
        type: boolean
        description: 公告是否置顶
        example: false
      content:
        type: string
        description: 全站公告的内容
        example: BITOJ 即日起开始营业，欢迎 AK！

  PostProblemModel:
    type: object
    required:
      - title
    properties:
      title:
        type: string
        minLength: 1
        maxLength: 128
        description: 题目标题
        example: "诸神眷顾的幻想乡"
  PutProblemModel:
    type: object
    properties:
      title:
        type: string
        minLength: 1
        maxLength: 128
        description: 题目的标题。若不需要修改，请不要提供此字段
        example: "诸神眷顾的幻想乡"
      legend:
        type: string
        description: 题目的背景描述。若不需要修改，请不要提供此字段
        example: "hello world"
      input:
        type: string
        description: 题目的输入描述。若不需要修改，请不要提供此字段
        example: "input description"
      output:
        type: string
        description: 题目的输出描述。若不需要修改，请不要提供此字段
        example: "output description"
      notes:
        type: string
        description: 题目的提示信息。若不需要修改，请不要提供此字段
        example: "notes"
      difficulty:
        type: integer
        description: 题目的难度系数。若不需要修改，请不要提供此字段
        example: 80
      timeLimit:
        type: integer
        minimum: 500
        maximum: 10000
        description: 单个测试点的时间限制，单位为毫秒。若不需要修改，请不要提供此字段
        example: 1000
      memoryLimit:
        type: integer
        minimum: 32
        maximum: 1024
        description: 单个测试点的内存限制，单位为MB。若不需要修改，请不要提供此字段
        example: 256
      judgeMode:
        type: string
        description: 题目的评测模式。若不需要修改，请不要提供此字段
        enum:
          - Standard
          - SpecialJudge
          - Interactive
        example: SpecialJudge
      builtinCheckerOptions:
        type: array
        items:
          type: string
        description: 当评测模式为 Standard 模式时，该成员指出传递给内建答案检查器的参数。可能的值包括：`FloatingPointAware` 以及 `IgnoreCase`
        example:
          - FloatingPointAware

  ProblemListItem:
    type: object
    required:
      - id
      - archiveId
      - title
      - creationTime
      - lastUpdateTime
      - author
      - source
      - difficulty
      - tags
      - totalSubmissions
      - acceptedSubmissions
      - totalAttemptedUsers
      - totalSolvedUsers
      - lastSubmissionTime
    properties:
      id:
        type: string
        description: 题目的全局唯一 ID，请注意与题目的 archiveId 的区别
        example: "5d8825e87d2847a7e4886fbf"
      archiveId:
        type: integer
        description: 题目在 Problem Archive 中的 ID
        example: 10
      title:
        type: string
        description: 题目的标题
        example: "Two Sums"
      creationTime:
        type: string
        description: 题目的创建时间，UTC 时区
        example: "2019-09-23T01:54:48.087Z"
      lastUpdateTime:
        type: string
        description: 题目上次更新的时间，UTC 时区
        example: "2019-09-23T01:54:48.087Z"
      author:
        type: string
        description: 题目的作者的用户名
        example: "admin"
      source:
        type: string
        description: 题目的来源
        example: "2018年北京理工大学程序设计校赛"
      difficulty:
        type: integer
        description: 题目的难度系数
        example: 80
      tags:
        type: array
        items:
          type: string
        description: 题目的标签
        example:
          - 字符串
          - 模拟
          - 数据结构
      totalSubmissions:
        type: integer
        description: 题目的总提交数量
        example: 1000
      acceptedSubmissions:
        type: integer
        description: 题目的 AC 提交数量
        example: 100
      totalAttemptedUsers:
        type: integer
        description: 尝试过该题目的用户总数
        example: 100
      totalSolvedUsers:
        type: integer
        description: 成功解答该题目的用户总数
        example: 40
      lastSubmissionTime:
        type: string
        description: 题目的上次提交时间
        example: "2019-09-23T01:54:48.087Z"
  ProblemInfo:
    type: object
    required:
      - id
      - archiveId
      - title
      - creationTime
      - lastUpdateTime
      - author
      - source
      - legend
      - input
      - output
      - samples
      - notes
      - difficulty
      - tags
      - timeLimit
      - memoryLimit
      - judgeMode
      - totalSubmissions
      - acceptedSubmissions
      - testReady
    properties:
      id:
        type: string
        description: 题目的全局唯一 ID
        example: "5d8825e87d2847a7e4886fbf"
      archiveId:
        type: integer
        description: 题目在公开题目集中的 ID。若题目不在公开题目集中，该字段为 null
      title:
        type: string
        description: 题目标题
        example: "诸神眷顾的幻想乡"
      creationTime:
        type: string
        description: 题目的创建时间，UTC 时区
        example: "2019-09-23T01:54:48.087Z"
      lastUpdateTime:
        type: string
        description: 题目上次更新的时间，UTC 时区
        example: "2019-09-23T01:54:48.087Z"
      author:
        type: string
        description: 题目的作者的用户名
        example: "admin"
      source:
        type: string
        description: 题目的来源
        example: "2018年北京理工大学程序设计校赛"
      legend:
        type: string
        description: 题目正文叙述
        example: "hello world"
      input:
        type: string
        description: 题目输入描述
        example: "input description"
      output:
        type: string
        description: 题目输出描述
        example: "output description"
      samples:
        type: array
        description: 题目样例
        items:
          type: object
          properties:
            input:
              type: string
              description: 样例输入
              example: "1 2"
            output:
              type: string
              description: 样例输出
              example: "3"
      notes:
        type: string
        description: 题目提示信息
        example: "notes"
      difficulty:
        type: integer
        description: 题目难度系数，范围为 [0, 100]
        example: 80
      tags:
        type: array
        description: 题目标签
        items:
          type: string
        example:
          - "字符串"
          - "模拟"
          - "数据结构"
      timeLimit:
        type: integer
        description: 题目时间限制，单位为毫秒
        example: 1000
      memoryLimit:
        type: integer
        description: 题目内存限制，单位为 MB
        example: 256
      judgeMode:
        type: string
        description: 题目评测模式
        enum:
          - Standard
          - SpecialJudge
          - Interactive
      builtinCheckerOptions:
        type: array
        items:
          type: string
        description: 当评测模式为 Standard 时，该字段表示内建答案检查器的选项。可能的值有 `FloatingPointAware` 以及 `IgnoreCase`
        example:
          - FloatingPointAware
          - IgnoreCase
      totalSubmissions:
        type: integer
        description: 题目总提交数量
        example: 100
      acceptedSubmissions:
        type: integer
        description: 题目 AC 提交数量
        example: 80
      totalAttemptedUsers:
        type: integer
        description: 尝试过该题目的用户总数
        example: 100
      totalSolvedUsers:
        type: integer
        description: 成功解答该题目的用户总数
        example: 40
      lastSubmissionTime:
        type: string
        description: 题目的上次提交时间
        example: "2019-09-23T01:54:48.087Z"
      testReady:
        type: boolean
        description: 用户是否可以提交答案
        example: true

  PostArchiveModel:
    type: object
    required:
      - id
      - archiveId
    properties:
      id:
        type: string
        description: 题目的全局唯一 ID
        example: "5d8825e87d2847a7e4886fbf"
      archiveId:
        type: integer
        description: 题目在公开题目集中的 ID
        minimum: 0
        example: 100

  PostLanguageModel:
    type: object
    required:
      - langId
      - dialect
      - version
      - displayName
    properties:
      langId:
        type: string
        minLength: 1
        maxLength: 32
        description: 语言标识符
        example: cpp
      dialect:
        type: string
        minLength: 1
        maxLength: 32
        description: 方言标识符
        example: clang
      version:
        type: string
        minLength: 1
        maxLength: 32
        description: 版本标识符
        example: '17'
      displayName:
        type: string
        minLength: 1
        maxLength: 128
        description: 语言的显示名称
        example: 'Clang++ 17'

  LanguageInfo:
    type: object
    required:
      - id
      - langId
      - dialect
      - version
      - displayName
    properties:
      id:
        type: string
        description: 语言的全局唯一标识符
        example: '25fa137e2b3513ace3253cdf'
      langId:
        type: string
        description: 语言标识符
        example: cpp
      dialect:
        type: string
        description: 方言标识符
        example: clang
      version:
        type: string
        description: 版本标识符
        example: '17'
      displayName:
        type: string
        description: 语言的显示名称
        example: 'Clang++ 17'
